{
	"info": {
		"_postman_id": "0eb7e554-18a3-4370-ac4b-e71bfe589c07",
		"name": "movieApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16838225"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Assertions\", () => {",
							"    pm.expect( [ 'User was registered successfully!', 'Failed! Username is already in use!' ] ).to.contain( jsonData.message );",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"joedoe\",\n    \"email\": \"joedoe@test.com\",\n    \"password\": \"joedoe123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:7500/v1/auth/signup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7500",
					"path": [
						"v1",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"pm.collectionVariables.set('jwtAccess', jsonData.accessToken);",
							"",
							"pm.test(\"Assertions\", () => {",
							"    pm.expect( jsonData.username ).to.be.equal( 'joedoe' );",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"joedoe\",\n    \"password\": \"joedoe123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:7500/v1/auth/signin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7500",
					"path": [
						"v1",
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Assertions\", () => {",
							"    pm.expect( jsonData.results.length ).to.be.equal( 2 );",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{jwtAccess}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:7500/v1/movie",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7500",
					"path": [
						"v1",
						"movie"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {",
							"  pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{jwtAccess}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"My new movie\",\n    \"description\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\",\n    \"date\": \"{{$isoTimestamp}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:7500/v1/movie",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7500",
					"path": [
						"v1",
						"movie"
					]
				}
			},
			"response": []
		},
		{
			"name": "Prepare for Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"pm.collectionVariables.set('idToUpdate', jsonData.results[0]._id);",
							"pm.collectionVariables.set('titleToUpdate', jsonData.results[0].title);",
							"",
							"pm.test(\"Assertions\", () => {",
							"    pm.expect( jsonData.results.length ).to.be.equal( 3 );",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{jwtAccess}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:7500/v1/movie",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7500",
					"path": [
						"v1",
						"movie"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {",
							"  pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{jwtAccess}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{titleToUpdate}} [Updated!]\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:7500/v1/movie/{{idToUpdate}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7500",
					"path": [
						"v1",
						"movie",
						"{{idToUpdate}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"const idToUpdate = pm.collectionVariables.get('idToUpdate');",
							"",
							"pm.test(\"Assertions\", () => {",
							"    pm.expect( jsonData.results.find( ( data ) => data.title.match(/Updated/gi) !== null ).id ).to.be.equal(  );",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{jwtAccess}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:7500/v1/movie",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7500",
					"path": [
						"v1",
						"movie"
					]
				}
			},
			"response": []
		},
		{
			"name": "Duplicate Movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {",
							"  pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{jwtAccess}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:7500/v1/movie/{{idToUpdate}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7500",
					"path": [
						"v1",
						"movie",
						"{{idToUpdate}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate Duplicate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Assertions\", () => {",
							"    pm.expect( jsonData.results.find( ( data ) => data.title.match(/Copy/gi) !== null ) !== undefined ).to.be.equal( true );",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{jwtAccess}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:7500/v1/movie",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7500",
					"path": [
						"v1",
						"movie"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Movie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {",
							"  pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{jwtAccess}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:7500/v1/movie/{{idToUpdate}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7500",
					"path": [
						"v1",
						"movie",
						"{{idToUpdate}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"const idToUpdate = pm.collectionVariables.get('idToUpdate');",
							"",
							"pm.test(\"Assertions\", () => {",
							"    pm.expect( jsonData.results.find( ( data ) => data._id === idToUpdate ) === undefined ).to.be.equal( true );",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{jwtAccess}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:7500/v1/movie",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7500",
					"path": [
						"v1",
						"movie"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "jwtAccess",
			"value": ""
		},
		{
			"key": "idToUpdate",
			"value": ""
		},
		{
			"key": "titleToUpdate",
			"value": ""
		}
	]
}